/*****************************************************************************

		Copyright (c) My Company

 Project:  TEST2
 FileName: TEST2.PRO
 Purpose: No description
 Written by: Visual Prolog
 Comments:
******************************************************************************/

include "test2.inc"

database - main
	x(integer,integer)
	%cell(integer,integer).%h(unsigned16,unsigned16)
	
	
global domains 
	%cells = cell*.
	%halfcell = unsigned16
	%cell = x(integer,integer).%h(unsigned16,unsigned16)
	%cells = cell*.
	%c = x(integer,integer)
	
	i=integer.
	ii = integer*.

%отобразить: (клетки).
%final()
global predicates
	%win(integer, integer, cells, cells) - nondeterm (i,i,i,o).
	
	step(ii, ii, i) -  nondeterm (i,o,o) (i,o,i).
	procedure shift2(integer,integer,integer,integer) -  nondeterm (i, i,o, o) language stdcall.
	procedure nonshift2(integer,integer,integer,integer) -  nondeterm (i, i,o, o) language stdcall.
	procedure delete_db2 language stdcall.
	%way(integer, cells) - nondeterm (i,i). %  language stdcall as "way".  %ход
	%member(integer,ii) -  nondeterm (i,i).
	%reverse(cells,cells,cells) -  nondeterm (i,i,o).
	%append(cells,cells,cells) - nondeterm (i,i,o).
	procedure say2 (integer,integer,integer) - nondeterm(i,i,o) language stdcall
	procedure getline (ii) - (o) language stdcall
	%procedure sayy (integer,integer) -nondeterm (i,o) language stdcall
	%procedure getway(integer,integer,integer) - nondeterm (i,o,o) language stdcall
	
clauses
	
	say2(X,Y,1) :- x(X,Y).
	say2(X,Y,0) :- assert(x(X,Y)),save("db.txt", main).%not(member(X,XS)).
	shift2(X,Y,X,Ys):- Ys = Y-1,Ys > 1, Ys < 5.  
    	shift2(X,Y,X,Ys):- Ys = Y+1,Ys > 1, Ys < 5.
	shift2(X,Y,Xs,Y):- Xs = X-1,Xs > 1, Xs < 7.  	
    	shift2(X,Y,Xs,Y):- Xs = X+1,Xs > 1, Xs < 7.    	      
    	nonshift2(X,Y,X,Ys):- Ys = Y+1, Ys < 5, not(x(X,Ys)). 
    	nonshift2(X,Y,X,Ys):- Ys = Y-1, Ys > 1, not(x(X,Ys)).
    	nonshift2(X,Y,Xs,Y):- Xs = X+1, Xs < 7, not(x(Xs,Y)).  
    	nonshift2(X,Y,Xs,Y):- Xs = X-1, Xs > 1, not(x(Xs,Y)).    	      

    	
	delete_db2:- retractall(x(_,_)).
	
	%getline():- [x(_,_)].
	%sayy(X,1) :- y(X).
	%sayy(X,0) :- assert(y(X)),save("db.txt", main).%not(member(X,YS)).
	
	%member(X,[X|_]).
  	%member(X,[_|H]):-member(X,H).
  	%reverse([H|T],S,L):-reverse(T,[H|S],L). 
        %reverse([],L,L). 
  	%append([],B,B). %esli pervii spisok pustoi, to rezultat - vtotoi spisok
	%append([H|Tail],B,[H|NewTail]):-append(Tail,B,NewTail). %esli ne pustoi, to rekursivno obiedinyaem hvost i vtoroi spisok
  	
  	%getway(X,Y,1):-sayx(X,Y),Y=5.%:-Line=[X,Y],way(Player,Line).
  	%getway(X,Y,0):-say_hello(X,Y),Y<>5.
  	
	%win(Player1, Player2, Line, Line1):-step(Line, Line1, Cell),member(Cell, Line).
    	%win(Player1, Player2, Line, Line1):-step(Line, Line1, _),not(win(Player2, Player1, Line1, _)).

	%way(2, Line):-step(Line, Line1, Cell),member(Cell, Line),!,write("Компьютер 1 выиграл!\n\n", Line1).
    	%way(2, Line):-win(2, 1, Line, Line1),!,way(1, Line1).
    	%way(2, Line):-step(Line, Line1, _),!,way(1, Line1).
    	
    	%way(1, Line):-step(Line, Line1, X), !. %if member(X, Line) then R=1 else  way(2, Line1) end if.
    	%way(_, _).
    	
    	%step([A, B | x(_,_)], [X, A, B | x(_,_)], X):-shift(A, X),not(X = B).
    	%step(Line, Line1, X):-reverse(Line,[],Line2),Line2 = [A, B | _],shift(A, X),not(X = B),append(Line, [X], Line1).
    	
    	     
goal
  true.